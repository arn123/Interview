{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red10\green0\blue109;\red8\green1\blue1;\red255\green255\blue252;
\red93\green0\blue2;\red10\green82\blue135;\red109\green109\blue109;\red0\green0\blue255;\red14\green87\blue18;
\red11\green96\blue192;\red58\green88\blue111;}
{\*\listtable{\list\listtemplateid1\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid1\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid1}
{\list\listtemplateid2\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid101\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid2}
{\list\listtemplateid3\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid201\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid3}
{\list\listtemplateid4\listhybrid{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace360\levelindent0{\*\levelmarker \{disc\}}{\leveltext\leveltemplateid301\'01\uc0\u8226 ;}{\levelnumbers;}\fi-360\li720\lin720 }{\listname ;}\listid4}}
{\*\listoverridetable{\listoverride\listid1\listoverridecount0\ls1}{\listoverride\listid2\listoverridecount0\ls2}{\listoverride\listid3\listoverridecount0\ls3}{\listoverride\listid4\listoverridecount0\ls4}}
\paperw11900\paperh16840\margl1440\margr1440\vieww22980\viewh14620\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\b\fs34 \cf0 REST(Representational State Transfer)
\b0 \
\
\pard\pardeftab720\sl380\sa228

\b\fs30 \cf0 Key goals
\b0\fs38 \
\pard\pardeftab720\sl380\sa130

\fs28 \cf0 Key goals of REST include:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl380\sa26
\ls1\ilvl0\cf2 {\listtext	\'95	}\cf0 Scalability of component interactions\
{\listtext	\'95	}Generality of interfaces\
{\listtext	\'95	}Independent deployment of components\
{\listtext	\'95	}Intermediary components to reduce latency, enforce security and encapsulate legacy\cf2  \cf0 systems\cf2 \
\pard\pardeftab720\sl420\sa100

\fs30 \cf3 \cb4 \

\b Principles
\b0 \
\pard\pardeftab720\sl420

\fs28 \cf3 Here are some principles applicable in REST-like applications:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa75
\ls2\ilvl0\cf3 \cb4 {\listtext	\'95	}The state of a resource remains internal to the server, not the client - The client can request it, or update it with requests made to the server.\
{\listtext	\'95	}No client context saved on the server between requests - The server must not store the status of a client. Otherwise, this would break the scalability objective of REST when reaching a couple million users. Remember that requests can be distributed to several physical servers, which could cause physical resource consumption issues.\
{\listtext	\'95	}Client requests contain all information to service it - No matter which request is sent by a client to a server, it must be complete enough for the server to process it.\
{\listtext	\'95	}Session states are stored on the client side - If necessary, any information about the status of the communication between a logical server and a logical client must be held on the client side.\
{\listtext	\'95	}Multiple representations of a resource can coexist - The chosen format used to represent the state of a resource in requests and responses is free (XML, JSON...). Multiple formats can be used.\
{\listtext	\'95	}Responses explicitly indicate their cacheability - When a server returns a response to a request, the information it contains may or may not be cached by the client. If not, the client should make new requests to obtain the latest status of a resource, for example.\
{\listtext	\'95	}Code on Demand - This is an optional feature in REST. Clients can fetch some extra code from the server to enrich their functionalities. An example is Javascript.\
\pard\tx566\pardeftab720\sl380\sa26

\fs26 \cf0 \cb1 \
\pard\pardeftab720\sl420\sa100

\b\fs30 \cf3 \cb4 REST Over HTTP
\b0 \
\pard\pardeftab720\sl420
\cf3 When implementing REST over HTTP, the logical REST client is typically a web browser and the logical REST server is a web server. The REST API (or service) must be \cf5 hypertext\cf3  driven.\
\
About resource IDs:\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa75
\ls3\ilvl0\cf3 \cb4 {\listtext	\'95	}The preference is given to nouns rather than verbs to indicate the type of a resource (cat, dog, car...).\
{\listtext	\'95	}The unique ID of a resource is a \cf5 URI\cf3 , for example:http://www.mysite.com/invoice/34657.\
{\listtext	\'95	}A group of resources can also be accessed with a URI, for example:http://www.mysite.com/user/7723/invoices.\
\pard\pardeftab720\sl420
\cf3 \cb4 It is also considered good practice to use URIs in resource representations when a resource refers to another resource. For example, in a XML document representing a resource:\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt\clvertalbase \clshdrawnil \clwWidth11380\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl320
\cf0 \cb1 <\cf6 dog\cf0  \cf7 self\cf0 =\cf8 'www.mysite.com/dog/923'\cf0  >\
\'a0\'a0\'a0\'a0<\cf6 name\cf0 >Lassie</\cf6 name\cf0 >\
\'a0\'a0\'a0\'a0<\cf6 owner\cf0  \cf7 ref\cf0 =\cf8 'www.mysite.com/owner/411'\cf0  />\
</\cf6 dog\cf0 >\cell \lastrow\row
\pard\pardeftab720\sl420
\cf3 \cb4 \
In order to perform operations on resources, simple HTTP is used to make calls between machines. HTTP knows several types of calls: PUT, GET, POST, DELETE, HEAD, CONNECT,PATCH, TRACE and OPTIONS.\
\
However, REST only uses four: PUT, GET, POST and DELETE.\
\pard\tx220\tx720\pardeftab720\li720\fi-720\sl420\sa75
\ls4\ilvl0\cf3 \cb4 {\listtext	\'95	}GET - Clients can request the status of a resource by making an HTTP GETrequest to the server, using the resource's URI. REST requires that this operation does not produce any side effect to the resource's status (nullipotent).\
{\listtext	\'95	}PUT - Creates a new resource. Since the client does not know the next invoice number, the URI can be: http://www.mysite.com/invoice. If the resource is already created, it is not recreated. In other words, a REST PUT onhttp://www.mysite.com/invoice/841 (for example) is (and must be) idempotent. Invoice 841 must not be created multiple times if clients call thatPUT several times.\
{\listtext	\'95	}POST - REST requires POST client requests to update the corresponding resource with information provided by the client, or to create this resource if it does not exist. This operation is not idempotent.\
{\listtext	\'95	}DELETE-\'a0 This operation removes the resource forever. It is idempotent.\
\pard\tx566\pardeftab720\sl380\sa26

\fs26 \cf0 \cb1 \
\pard\pardeftab720\sl420\sa200

\fs28 \cf0 Consider the following example of a simple procurement scenario:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\fs24 \cf0 {{\NeXTGraphic Procedural Design.png \width5620 \height6100
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\fs28 \cf0 \
\pard\pardeftab720\sl420\sa200
\cf0 You can see that there are two services defined here (without implying any particular implementation technology). The interface to these services is specific to the task \'97 it\'92s an OrderManagement and CustomerManagement service we are talking about. If a client wants to consume these services, it needs to be coded against this particular interface \'97 there is no way to use a client that was built before these interfaces were specified to meaningfully interact with them. The interfaces define the services\'92 application protocol.\
In a RESTful HTTP approach, you would have to get by with the generic interface that makes up the \cf9 HTTP application protocol\cf0 . You might come up with something like this:\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\fs24 \cf0 {{\NeXTGraphic REST Design.png \width11680 \height8880
}¬}\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\pardirnatural

\fs28 \cf0 \

\itap1\trowd \taflags1 \trgaph108\trleft-108 \trcbpat1 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth1200\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx4320
\clvertalt\clvertalbase \clshdrawnil \clwWidth13300\clftsWidth3 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720\sl240
\cf10 \cell 
\pard\intbl\itap1\pardeftab720\sl360\sa280
\cf0 \
Multiple Deletion in RESTful client\
DELETE {\field{\*\fldinst{HYPERLINK "http://example.com/resources/id1,id2,id3,id4"}}{\fldrslt \cf11 http://example.com/resources/id1,id2,id3,id4}} or DELETE{\field{\*\fldinst{HYPERLINK "http://example.com/resources/id1+id2+id3+id4"}}{\fldrslt \cf11 http://example.com/resources/id1+id2+id3+id4}}. As "REST is an architecture (...) [not] protocol" to quote this wikipedia article there is, no single one way of doing this.\cell \lastrow\row
}